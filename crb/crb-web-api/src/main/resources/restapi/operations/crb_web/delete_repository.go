// Copyright (c) [2017] Dell Inc. or its subsidiaries. All Rights Reserved.
package crb_web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteRepositoryHandlerFunc turns a function with the right signature into a delete repository handler
type DeleteRepositoryHandlerFunc func(DeleteRepositoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteRepositoryHandlerFunc) Handle(params DeleteRepositoryParams) middleware.Responder {
	return fn(params)
}

// DeleteRepositoryHandler interface for that can handle valid delete repository params
type DeleteRepositoryHandler interface {
	Handle(DeleteRepositoryParams) middleware.Responder
}

// NewDeleteRepository creates a new http.Handler for the delete repository operation
func NewDeleteRepository(ctx *middleware.Context, handler DeleteRepositoryHandler) *DeleteRepository {
	return &DeleteRepository{Context: ctx, Handler: handler}
}

/*DeleteRepository swagger:route DELETE /repositories/{repoId} crb-web deleteRepository

Delete a repository instance.

Delete a repository instance of specified repoId. Copy data in that repository is not deleted; however copy data will not be accessible after deleting repository instance

*/
type DeleteRepository struct {
	Context *middleware.Context
	Handler DeleteRepositoryHandler
}

func (o *DeleteRepository) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteRepositoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
