package crb_web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"../../work/nazgul/copyrepo/copyrepo-web-api/src/main/resources/models"
)

// UpdateRepositoryInfoOKCode is the HTTP code returned for type UpdateRepositoryInfoOK
const UpdateRepositoryInfoOKCode int = 200

/*UpdateRepositoryInfoOK Successfully updated a repo info in Metadata-DB

swagger:response updateRepositoryInfoOK
*/
type UpdateRepositoryInfoOK struct {

	/*
	  In: Body
	*/
	Payload *models.RepositoryInstance `json:"body,omitempty"`
}

// NewUpdateRepositoryInfoOK creates UpdateRepositoryInfoOK with default headers values
func NewUpdateRepositoryInfoOK() *UpdateRepositoryInfoOK {
	return &UpdateRepositoryInfoOK{}
}

// WithPayload adds the payload to the update repository info o k response
func (o *UpdateRepositoryInfoOK) WithPayload(payload *models.RepositoryInstance) *UpdateRepositoryInfoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update repository info o k response
func (o *UpdateRepositoryInfoOK) SetPayload(payload *models.RepositoryInstance) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRepositoryInfoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateRepositoryInfoInternalServerErrorCode is the HTTP code returned for type UpdateRepositoryInfoInternalServerError
const UpdateRepositoryInfoInternalServerErrorCode int = 500

/*UpdateRepositoryInfoInternalServerError Internal error - Most likely Metadata-DB not accessible

swagger:response updateRepositoryInfoInternalServerError
*/
type UpdateRepositoryInfoInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateRepositoryInfoInternalServerError creates UpdateRepositoryInfoInternalServerError with default headers values
func NewUpdateRepositoryInfoInternalServerError() *UpdateRepositoryInfoInternalServerError {
	return &UpdateRepositoryInfoInternalServerError{}
}

// WithPayload adds the payload to the update repository info internal server error response
func (o *UpdateRepositoryInfoInternalServerError) WithPayload(payload *models.Error) *UpdateRepositoryInfoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update repository info internal server error response
func (o *UpdateRepositoryInfoInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRepositoryInfoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateRepositoryInfoDefault unexpected error

swagger:response updateRepositoryInfoDefault
*/
type UpdateRepositoryInfoDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateRepositoryInfoDefault creates UpdateRepositoryInfoDefault with default headers values
func NewUpdateRepositoryInfoDefault(code int) *UpdateRepositoryInfoDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateRepositoryInfoDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update repository info default response
func (o *UpdateRepositoryInfoDefault) WithStatusCode(code int) *UpdateRepositoryInfoDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update repository info default response
func (o *UpdateRepositoryInfoDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update repository info default response
func (o *UpdateRepositoryInfoDefault) WithPayload(payload *models.Error) *UpdateRepositoryInfoDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update repository info default response
func (o *UpdateRepositoryInfoDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateRepositoryInfoDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
