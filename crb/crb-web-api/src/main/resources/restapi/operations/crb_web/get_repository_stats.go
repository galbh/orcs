package crb_web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRepositoryStatsHandlerFunc turns a function with the right signature into a get repository stats handler
type GetRepositoryStatsHandlerFunc func(GetRepositoryStatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRepositoryStatsHandlerFunc) Handle(params GetRepositoryStatsParams) middleware.Responder {
	return fn(params)
}

// GetRepositoryStatsHandler interface for that can handle valid get repository stats params
type GetRepositoryStatsHandler interface {
	Handle(GetRepositoryStatsParams) middleware.Responder
}

// NewGetRepositoryStats creates a new http.Handler for the get repository stats operation
func NewGetRepositoryStats(ctx *middleware.Context, handler GetRepositoryStatsHandler) *GetRepositoryStats {
	return &GetRepositoryStats{Context: ctx, Handler: handler}
}

/*GetRepositoryStats swagger:route GET /repositories/{repoId}/stats crb-web getRepositoryStats

Get stats of the repoId such as used/available space etc.

Return metadata associated with the repository with repoId

*/
type GetRepositoryStats struct {
	Context *middleware.Context
	Handler GetRepositoryStatsHandler
}

func (o *GetRepositoryStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetRepositoryStatsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
