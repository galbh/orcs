package crb_web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateRepositoryInfoHandlerFunc turns a function with the right signature into a update repository info handler
type UpdateRepositoryInfoHandlerFunc func(UpdateRepositoryInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateRepositoryInfoHandlerFunc) Handle(params UpdateRepositoryInfoParams) middleware.Responder {
	return fn(params)
}

// UpdateRepositoryInfoHandler interface for that can handle valid update repository info params
type UpdateRepositoryInfoHandler interface {
	Handle(UpdateRepositoryInfoParams) middleware.Responder
}

// NewUpdateRepositoryInfo creates a new http.Handler for the update repository info operation
func NewUpdateRepositoryInfo(ctx *middleware.Context, handler UpdateRepositoryInfoHandler) *UpdateRepositoryInfo {
	return &UpdateRepositoryInfo{Context: ctx, Handler: handler}
}

/*UpdateRepositoryInfo swagger:route PUT /repositories/{repoId} crb-web updateRepositoryInfo

Update (or create if not present) repository info of specified repoId.

Update (or create if not present) repository config info.

*/
type UpdateRepositoryInfo struct {
	Context *middleware.Context
	Handler UpdateRepositoryInfoHandler
}

func (o *UpdateRepositoryInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUpdateRepositoryInfoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
