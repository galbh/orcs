package crb_web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"../../work/nazgul/copyrepo/copyrepo-web-api/src/main/resources/models"
)

// DeleteRepositoryOKCode is the HTTP code returned for type DeleteRepositoryOK
const DeleteRepositoryOKCode int = 200

/*DeleteRepositoryOK Success - Successful operation

swagger:response deleteRepositoryOK
*/
type DeleteRepositoryOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteRepositoryOK creates DeleteRepositoryOK with default headers values
func NewDeleteRepositoryOK() *DeleteRepositoryOK {
	return &DeleteRepositoryOK{}
}

// WithPayload adds the payload to the delete repository o k response
func (o *DeleteRepositoryOK) WithPayload(payload string) *DeleteRepositoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository o k response
func (o *DeleteRepositoryOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteRepositoryNotFoundCode is the HTTP code returned for type DeleteRepositoryNotFound
const DeleteRepositoryNotFoundCode int = 404

/*DeleteRepositoryNotFound Repository instance of specified repoId does not exist

swagger:response deleteRepositoryNotFound
*/
type DeleteRepositoryNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRepositoryNotFound creates DeleteRepositoryNotFound with default headers values
func NewDeleteRepositoryNotFound() *DeleteRepositoryNotFound {
	return &DeleteRepositoryNotFound{}
}

// WithPayload adds the payload to the delete repository not found response
func (o *DeleteRepositoryNotFound) WithPayload(payload *models.Error) *DeleteRepositoryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository not found response
func (o *DeleteRepositoryNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRepositoryInternalServerErrorCode is the HTTP code returned for type DeleteRepositoryInternalServerError
const DeleteRepositoryInternalServerErrorCode int = 500

/*DeleteRepositoryInternalServerError Internal error -- Most likely Metadata-DB could not be accessed

swagger:response deleteRepositoryInternalServerError
*/
type DeleteRepositoryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRepositoryInternalServerError creates DeleteRepositoryInternalServerError with default headers values
func NewDeleteRepositoryInternalServerError() *DeleteRepositoryInternalServerError {
	return &DeleteRepositoryInternalServerError{}
}

// WithPayload adds the payload to the delete repository internal server error response
func (o *DeleteRepositoryInternalServerError) WithPayload(payload *models.Error) *DeleteRepositoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository internal server error response
func (o *DeleteRepositoryInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteRepositoryDefault unexpected error

swagger:response deleteRepositoryDefault
*/
type DeleteRepositoryDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRepositoryDefault creates DeleteRepositoryDefault with default headers values
func NewDeleteRepositoryDefault(code int) *DeleteRepositoryDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteRepositoryDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete repository default response
func (o *DeleteRepositoryDefault) WithStatusCode(code int) *DeleteRepositoryDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete repository default response
func (o *DeleteRepositoryDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete repository default response
func (o *DeleteRepositoryDefault) WithPayload(payload *models.Error) *DeleteRepositoryDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository default response
func (o *DeleteRepositoryDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
