package crb_web_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateCopyInRepoHandlerFunc turns a function with the right signature into a create copy in repo handler
type CreateCopyInRepoHandlerFunc func(CreateCopyInRepoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCopyInRepoHandlerFunc) Handle(params CreateCopyInRepoParams) middleware.Responder {
	return fn(params)
}

// CreateCopyInRepoHandler interface for that can handle valid create copy in repo params
type CreateCopyInRepoHandler interface {
	Handle(CreateCopyInRepoParams) middleware.Responder
}

// NewCreateCopyInRepo creates a new http.Handler for the create copy in repo operation
func NewCreateCopyInRepo(ctx *middleware.Context, handler CreateCopyInRepoHandler) *CreateCopyInRepo {
	return &CreateCopyInRepo{Context: ctx, Handler: handler}
}

/*CreateCopyInRepo swagger:route POST /repositories/{repoId}/copies/{copyId}/data crb-web-data createCopyInRepo

Create copy -- store copy data

Store copy instance data in the specified repo and create a Metadata-DB entry for this copy

*/
type CreateCopyInRepo struct {
	Context *middleware.Context
	Handler CreateCopyInRepoHandler
}

func (o *CreateCopyInRepo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateCopyInRepoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
