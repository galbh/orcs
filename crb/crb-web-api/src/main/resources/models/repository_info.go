// Copyright (c) [2017] Dell Inc. or its subsidiaries. All Rights Reserved.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RepositoryInfo repository info
// swagger:model RepositoryInfo
type RepositoryInfo struct {

	// Globally unique key for a configured copy repository. This id is provided to crb and later used to specify which repository copy should be saved.
	ID string `json:"id,omitempty"`

	// (optional) User friendly name configured for copy repository
	Name string `json:"name,omitempty"`

	// repo additional info
	RepoAdditionalInfo map[string]string `json:"repoAdditionalInfo,omitempty"`

	// repo supported protocols
	RepoSupportedProtocols []*SupportedProtocol `json:"repoSupportedProtocols"`
}

// Validate validates this repository info
func (m *RepositoryInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepoSupportedProtocols(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryInfo) validateRepoSupportedProtocols(formats strfmt.Registry) error {

	if swag.IsZero(m.RepoSupportedProtocols) { // not required
		return nil
	}

	for i := 0; i < len(m.RepoSupportedProtocols); i++ {

		if swag.IsZero(m.RepoSupportedProtocols[i]) { // not required
			continue
		}

		if m.RepoSupportedProtocols[i] != nil {

			if err := m.RepoSupportedProtocols[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repoSupportedProtocols" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
