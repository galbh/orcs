package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SupportedProtocol supported protocol
// swagger:model supportedProtocol
type SupportedProtocol struct {

	// copy location
	CopyLocation *SupportedProtocolCopyLocation `json:"copyLocation,omitempty"`

	// credentials
	// Required: true
	Credentials *SupportedProtocolCredentials `json:"credentials"`

	// endpoint
	// Required: true
	Endpoint *SupportedProtocolEndpoint `json:"endpoint"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this supported protocol
func (m *SupportedProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopyLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupportedProtocol) validateCopyLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.CopyLocation) { // not required
		return nil
	}

	if m.CopyLocation != nil {

		if err := m.CopyLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("copyLocation")
			}
			return err
		}
	}

	return nil
}

func (m *SupportedProtocol) validateCredentials(formats strfmt.Registry) error {

	if err := validate.Required("credentials", "body", m.Credentials); err != nil {
		return err
	}

	if m.Credentials != nil {

		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *SupportedProtocol) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	if m.Endpoint != nil {

		if err := m.Endpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *SupportedProtocol) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *SupportedProtocol) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// SupportedProtocolCopyLocation supported protocol copy location
// swagger:model SupportedProtocolCopyLocation
type SupportedProtocolCopyLocation struct {

	// copy location additional info
	CopyLocationAdditionalInfo map[string]string `json:"copyLocationAdditionalInfo,omitempty"`

	// Optional input of copies' location.  Could be absolute path on a mounted filesystem. Appropriate default should be used (such as /var/lib/crb).
	Path string `json:"path,omitempty"`
}

// Validate validates this supported protocol copy location
func (m *SupportedProtocolCopyLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// SupportedProtocolCredentials supported protocol credentials
// swagger:model SupportedProtocolCredentials
type SupportedProtocolCredentials struct {

	// credentials additional info
	CredentialsAdditionalInfo map[string]string `json:"credentialsAdditionalInfo,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// user
	User string `json:"user,omitempty"`
}

// Validate validates this supported protocol credentials
func (m *SupportedProtocolCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// SupportedProtocolEndpoint supported protocol endpoint
// swagger:model SupportedProtocolEndpoint
type SupportedProtocolEndpoint struct {

	// basic IP addr of dns name
	Addr string `json:"addr,omitempty"`

	// end point additional info
	EndPointAdditionalInfo map[string]string `json:"endPointAdditionalInfo,omitempty"`
}

// Validate validates this supported protocol endpoint
func (m *SupportedProtocolEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
